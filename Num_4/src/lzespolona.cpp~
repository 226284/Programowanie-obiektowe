#include "lzespolona.hh"
#include <iomanip>

using namespace std;

/*
 * W pliku tym nalezy zdefiniowac poszczegolne metody dla klasy LZespolona
 */

LZespolona::LZespolona() 
{
  _re = _im = 0;
}

/*LZespolona::LZespolona (float r, float i) 
  {
  _re = r;
  _im = i;
  }
*/


double LZespolona::Re() const
{
  return _re;
}

double& LZespolona::Re()
{
  return _re;
}

double LZespolona::Im() const
{
  return _im;
}

double& LZespolona::Im()
{
  return _im;
}


LZespolona LZespolona::operator + (const LZespolona& Arg2) const
{
  LZespolona b;
  
  b.LZespolona::Re() = Arg2.LZespolona::Re();
  b.LZespolona::Im() = Arg2.LZespolona::Im();

  b.LZespolona::Re() += _re;
  b.LZespolona::Im() += _im;
  
  return b;
}

LZespolona LZespolona::operator * (const LZespolona& Arg2) const
{
  LZespolona b;

  b.LZespolona::Re() = ((_re * Arg2.LZespolona::Re() ) - (_im * Arg2.LZespolona::Im() ));
  b.LZespolona::Im() = ((_re * Arg2.LZespolona::Im() ) + (_im * Arg2.LZespolona::Re() ));

  return b;
}


std::ostream& operator << (std::ostream& StrmWy,
			   const LZespolona& WyswietlanaLiczba)
{
  StrmWy << "{" << WyswietlanaLiczba.LZespolona::Re() << "+"
	 << WyswietlanaLiczba.LZespolona::Im()<< "i" << "}";

  return StrmWy;
}
