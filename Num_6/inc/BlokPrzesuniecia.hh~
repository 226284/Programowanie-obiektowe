#ifndef BLOKPRZESUNIECIA_HH
#define BLOKPRZESUNIECIA_HH
#include <string>
#include "BlokSygnalowy.hh"

#ifdef __GNUG__
# pragma interface
# pragma implementation
#endif


/*!
 * \brief Modeluje najważniejsze elementy bloku przesunięcia
 *
 * Klasa modeluje najważniejsze cechy bloku przesunięcia
 */
class BlokPrzesuniecia: public BlokSygnalowy {

   /*!
    * \brief Przechwouje wartość przesuniecia
    *
    *  Pole zawiera wartość przesuniecia
    */

  double przesuniecie;

public:

  /*!
   * \brief Wylicza wartość sygnału wyjściowego
   *
   *  Wylicza wartość sygnału wyjściowego. Na wejście metody
   *  jest przekazywany wcześniej wyliczony sygnał z wejścia
   *  bloku sygnałowego.
   */

  virtual bool WyliczSygnalWyj(const Sygnal& Syg)
  {
    _SygnalWyj = Syg;

    _SygnalWyj.ZmienWartoscSyg (Syg.WezWartoscSyg() + przesuniecie);

    return true;
  }

   /*!
   * \brief Udostępnia identyfikator bloku
   *
   *  Udostępnia liczbowy identyfikator bloku, który określa jego typ.
   *  Metoda, o ile będzie pomocna (zależy od przyjętej koncepcji),
   *  powinna być redefiniowana w klasie pochodnej.
   */

  virtual int Identyfikator() const { return 6; }

   /*!
   * \brief Udostępnia nazwę typu bloku
   *
   *  Udostępnia nazwę typu bloku
   */

  virtual const char* NazwaBloku() const { return "Blok przesuniecia"; }

  /*!
   * \brief Udostępnia opis bloku
   *
   *  Udostępnia opis, tzn jaki to jest blok, jakie ma parametry itd.
   */

  virtual std::string OpisBloku() const { return "Blok przesuwa sygnał o podawaną przez użytkownika stałą "; }



  void set_wzmocnienie (double prog) {przesuniecie = prog;}

  double get_wzmocnienie () {return przesuniecie;}

};


#endif
